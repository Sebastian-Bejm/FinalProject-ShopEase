@page "/cart"
@using ShopEaseApp.Models
@using ShopEaseApp.Services
@inject CartService CartService

<h3>Your Cart</h3>

@if (!CartService.CartItems.Any()) {
    <p>Your cart is empty.</p>
} else {
    <table class="table table-bordered table-hover align-middle">
        <thead class="table-light">
            <tr>
                <th>Product</th>
                <th>Category</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in CartService.CartItems.GroupBy(p => p.ProductID))
            {
                var product = group.First();
                var quantity = group.Count();
                <tr>
                    <td class="fw-semibold">@product.Name</td>
                    <td>@product.Category</td>
                    <td class="text-success">$@product.Price</td>
                    <td>
                        <input type="number" min="0" value="@quantity"
                            @onchange="e => UpdateQuantity(product, e.Value?.ToString())"
                            class="form-control form-control-sm" style="width: 80px;" />
                    </td>
                    <td>
                        <div class="d-flex gap-2">
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveOne(product.ProductID)">Remove One</button>
                            <button class="btn btn-warning btn-sm" @onclick="() => PromptRemoveAll(product)">Remove All</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showConfirmation && productToRemove != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content rounded-3">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Removal</h5>
                        <button type="button" class="btn-close" @onclick="CloseConfirmation"></button>
                    </div>
                    <div class="modal-body">
                        @if (isQuantityZeroTriggered)
                        {
                            <p>You set the quantity of <strong>@productToRemove.Name</strong> to zero. Do you want to remove it from your cart?</p>
                        }
                        else
                        {
                            <p>Are you sure you want to remove all instances of <strong>@productToRemove.Name</strong> from your cart?</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseConfirmation">Cancel</button>
                        <button class="btn btn-danger" @onclick="ConfirmRemoveAll">Remove All</button>
                    </div>
                </div>
            </div>
        </div>

    }

    <div class="mt-4 text-end">
        <h5>Total: <span class="text-success fw-bold">$@CartService.CalculateTotal().ToString("0.##")</span></h5>
    </div>
}

@code {
    private Product? productToRemove;
    private bool showConfirmation = false;
    private bool isQuantityZeroTriggered = false;

    private void PromptRemoveAll(Product product) {
        productToRemove = product;
        showConfirmation = true;
    }

    private void ConfirmRemoveAll() {
        if (productToRemove != null) {
            CartService.SetProductQuantity(productToRemove, 0);
        }
        CloseConfirmation();
    }


    private void CloseConfirmation() {
        productToRemove = null;
        showConfirmation = false;
        isQuantityZeroTriggered = false;
    }

    private void RemoveOne(int productId) {
        CartService.RemoveProduct(productId);
    }

    private void UpdateQuantity(Product product, string? value) {
        if (int.TryParse(value, out int quantity)) {
            if (quantity == 0) {
                productToRemove = product;
                showConfirmation = true;
                isQuantityZeroTriggered = true;
            } else if (quantity > 0) {
                CartService.SetProductQuantity(product, quantity);
            }
        }
    }

}
