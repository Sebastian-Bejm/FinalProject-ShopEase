@page "/cart"
@using ShopEaseApp.Models
@using ShopEaseApp.Services
@inject CartService CartService

<h3>Your Cart</h3>

@if (!CartService.CartItems.Any()) {
    <p>Your cart is empty.</p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Category</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in CartService.CartItems.GroupBy(p => p.ProductID)) {
                var product = group.First();
                var quantity = group.Count();
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Category</td>
                    <td>$@product.Price</td>
                    <td>
                        <input type="number" min="0" value="@quantity" @onchange="e => UpdateQuantity(product, e.Value?.ToString())" class="form-control form-control-sm" style="width: 80px;" />
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveOne(product.ProductID)">Remove One</button>
                        <button class="btn btn-warning btn-sm" @onclick="() => PromptRemoveAll(product)">Remove All</button>
                    </td>

                    @if (showConfirmation && productToRemove != null)
                    {
                        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Confirm Removal</h5>
                                        <button type="button" class="btn-close" @onclick="CloseConfirmation"></button>
                                    </div>
                                    <div class="modal-body">
                                        @if (isQuantityZeroTriggered)
                                        {
                                            <p>You set the quantity of <strong>@productToRemove.Name</strong> to zero. Do you want to remove it from your cart?</p>
                                        }
                                        else
                                        {
                                            <p>Are you sure you want to remove all instances of <strong>@productToRemove.Name</strong> from your cart?</p>
                                        }
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn btn-secondary" @onclick="CloseConfirmation">Cancel</button>
                                        <button class="btn btn-danger" @onclick="ConfirmRemoveAll">Remove All</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <strong>Total: $@CartService.CalculateTotal().ToString("0.##")</strong>
    </div>
}

@code {
    private Product? productToRemove;
    private bool showConfirmation = false;
    private bool isQuantityZeroTriggered = false;

    private void PromptRemoveAll(Product product) {
        productToRemove = product;
        showConfirmation = true;
    }

    private void ConfirmRemoveAll() {
        if (productToRemove != null) {
            CartService.SetProductQuantity(productToRemove, 0);
        }
        CloseConfirmation();
    }


    private void CloseConfirmation() {
        productToRemove = null;
        showConfirmation = false;
        isQuantityZeroTriggered = false;
    }

    private void RemoveOne(int productId) {
        CartService.RemoveProduct(productId);
    }

    private void UpdateQuantity(Product product, string? value) {
        if (int.TryParse(value, out int quantity)) {
            if (quantity == 0) {
                productToRemove = product;
                showConfirmation = true;
                isQuantityZeroTriggered = true;
            } else if (quantity > 0) {
                CartService.SetProductQuantity(product, quantity);
            }
        }
    }

}
